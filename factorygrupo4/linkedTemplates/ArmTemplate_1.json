{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "factorygrupo4"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/transformation7')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "container123"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "container123"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation5')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "container123"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "container123"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "container123"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbToCSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "List Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbRetail.INFORMATION_SCHEMA.TABLES where table_type = 'BASE TABLE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DataSetTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Export Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SQLTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().table_schema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CSVTable",
											"type": "DatasetReference",
											"parameters": {
												"FilaName": {
													"value": "@concat(item().table_schema,'_',item().table_name,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-02T18:15:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Categoria",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "prueda de config de github 2"
						},
						{
							"dataset": {
								"referenceName": "FactMine",
								"type": "DatasetReference"
							},
							"name": "source2",
							"description": "Importa la tabla FactMine"
						},
						{
							"dataset": {
								"referenceName": "Mine",
								"type": "DatasetReference"
							},
							"name": "source3",
							"description": "importa la tabla Mine"
						},
						{
							"dataset": {
								"referenceName": "Mine",
								"type": "DatasetReference"
							},
							"name": "source4",
							"description": "importa la tabla Mine"
						},
						{
							"dataset": {
								"referenceName": "Producto",
								"type": "DatasetReference"
							},
							"name": "source5",
							"description": "importa la tabla Producto"
						},
						{
							"dataset": {
								"referenceName": "Producto",
								"type": "DatasetReference"
							},
							"name": "source6",
							"description": "importa la tabla Producto"
						},
						{
							"dataset": {
								"referenceName": "SubCategoria",
								"type": "DatasetReference"
							},
							"name": "source7",
							"description": "Importa tabla SubCategoria"
						},
						{
							"dataset": {
								"referenceName": "VentasInternet",
								"type": "DatasetReference"
							},
							"name": "source8",
							"description": "Importa la tabla VentasInternet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "transformation1",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"description": "guarda la informacion en transformation1.csv"
						},
						{
							"dataset": {
								"referenceName": "transformation2",
								"type": "DatasetReference"
							},
							"name": "sink2",
							"description": "guarda el total en transformation2.csv"
						},
						{
							"dataset": {
								"referenceName": "transformation8",
								"type": "DatasetReference"
							},
							"name": "sink8",
							"description": "guarda la tabla en transformation8.csv"
						},
						{
							"dataset": {
								"referenceName": "transformation3",
								"type": "DatasetReference"
							},
							"name": "sink3",
							"description": "guarda las columnas en transformation3.csv"
						},
						{
							"dataset": {
								"referenceName": "transformation4",
								"type": "DatasetReference"
							},
							"name": "sink4",
							"description": "guarda las columnas en transformation4.csv"
						},
						{
							"dataset": {
								"referenceName": "transformation5",
								"type": "DatasetReference"
							},
							"name": "sink5",
							"description": "guarda la cantidad de productos en transformation5.csv"
						},
						{
							"dataset": {
								"referenceName": "transformation6",
								"type": "DatasetReference"
							},
							"name": "sink6",
							"description": "guarda la tabla en transformation6.csv"
						},
						{
							"dataset": {
								"referenceName": "transformation7",
								"type": "DatasetReference"
							},
							"name": "sink7",
							"description": "guarda la tabla transformation7.csv"
						},
						{
							"dataset": {
								"referenceName": "transformation9",
								"type": "DatasetReference"
							},
							"name": "sink9",
							"description": "guarda la tabla en transformation9.csv"
						}
					],
					"transformations": [
						{
							"name": "NombreCategorias",
							"description": "cambia el nombre de la Columna 'Categoria' a 'Nombre_Categoria'\ntambien selecciona esa columna sola"
						},
						{
							"name": "SeleccionMine",
							"description": "selecciona columnas: Country, FirstName, LastName y Age.\n"
						},
						{
							"name": "TotalOreMined",
							"description": "selecciona solo la columna TotalOreMined"
						},
						{
							"name": "TotalTotalOreMined",
							"description": "usa la funcion agregada sum(TotalOreMined) para obtener el total"
						},
						{
							"name": "seleccioncolumnas",
							"description": "selecciona las columnas 'Country, TotalWasted'"
						},
						{
							"name": "TotalByCountry",
							"description": "Agrupa por  'Country' y agrega la columna 'TotaltotalWasted'"
						},
						{
							"name": "codproducto",
							"description": "selecciona solo la columna 'Cod_Producto'"
						},
						{
							"name": "cantproductos",
							"description": "cuenta la cantidad de productos con count(Cod_Producto)"
						},
						{
							"name": "OrdenadoxCodProd",
							"description": "ordena por la columna Cod_Producto de forma descendente"
						},
						{
							"name": "CodCategoria3",
							"description": "filtra las categorias con\n Cod_Categoria == '3'"
						},
						{
							"name": "IngresosNetos",
							"description": "agrega (toFloat(Cantidad) * toFloat(PrecioUnitario)) - toFloat(CostoUnitario)"
						},
						{
							"name": "seleccioncolumnas2",
							"description": "Selecciona solo las columnas  'Cod_Producto, Cantidad, PrecioUnitario, CostoUnitario'"
						},
						{
							"name": "seleccioncolumnas3",
							"description": "'Cod_Producto, Ingresos Netos'"
						},
						{
							"name": "sumaypromedio",
							"description": "agrupa por 'Cod_Producto' y genera 'Promedio, Suma'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Cod_Categoria as string,",
						"          Categoria as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          TruckID as integer,",
						"          ProjectID as integer,",
						"          OperatorID as integer,",
						"          TotalOreMined as decimal(19,4),",
						"          TotalWasted as decimal(19,4),",
						"          Date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source(output(",
						"          TruckID as integer,",
						"          Truck as string,",
						"          ProjectID as integer,",
						"          Country as string,",
						"          OperatorID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Age as integer,",
						"          TotalOreMined as decimal(19,4),",
						"          TotalWasted as decimal(19,4),",
						"          Date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source(output(",
						"          TruckID as integer,",
						"          Truck as string,",
						"          ProjectID as integer,",
						"          Country as string,",
						"          OperatorID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          Age as integer,",
						"          TotalOreMined as decimal(19,4),",
						"          TotalWasted as decimal(19,4),",
						"          Date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source4",
						"source(output(",
						"          Cod_Producto as string,",
						"          Producto as string,",
						"          Cod_SubCategoria as string,",
						"          Color as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source5",
						"source(output(",
						"          Cod_Producto as string,",
						"          Producto as string,",
						"          Cod_SubCategoria as string,",
						"          Color as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source6",
						"source(output(",
						"          Cod_SubCategoria as string,",
						"          SubCategoria as string,",
						"          Cod_Categoria as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source7",
						"source(output(",
						"          Cod_Producto as string,",
						"          Cod_Cliente as string,",
						"          Cod_Territorio as string,",
						"          NumeroOrden as string,",
						"          Cantidad as string,",
						"          PrecioUnitario as string,",
						"          CostoUnitario as string,",
						"          Impuesto as string,",
						"          Flete as string,",
						"          FechaOrden as string,",
						"          FechaEnvio as string,",
						"          FechaVencimiento as string,",
						"          Cod_Promocion as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source8",
						"source1 select(mapColumn(",
						"          Cod_Categoria,",
						"          Nombre_Categoria = Categoria",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NombreCategorias",
						"source3 select(mapColumn(",
						"          Country,",
						"          FirstName,",
						"          LastName,",
						"          Age",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SeleccionMine",
						"source2 select(mapColumn(",
						"          TotalOreMined",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TotalOreMined",
						"TotalOreMined aggregate(Total = sum(TotalOreMined)) ~> TotalTotalOreMined",
						"source4 select(mapColumn(",
						"          Country,",
						"          TotalWasted",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> seleccioncolumnas",
						"seleccioncolumnas aggregate(groupBy(Country),",
						"     TotaltotalWasted = sum(TotalWasted)) ~> TotalByCountry",
						"source5 select(mapColumn(",
						"          Cod_Producto",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> codproducto",
						"codproducto aggregate(CantProductos = count(Cod_Producto)) ~> cantproductos",
						"source6 sort(desc(Cod_Producto, true)) ~> OrdenadoxCodProd",
						"source7 filter(Cod_Categoria == '3') ~> CodCategoria3",
						"seleccioncolumnas2 derive({Ingresos Netos} = ( toFloat(Cantidad) * toFloat(PrecioUnitario) ) - toFloat(CostoUnitario)) ~> IngresosNetos",
						"source8 select(mapColumn(",
						"          Cod_Producto,",
						"          Cantidad,",
						"          PrecioUnitario,",
						"          CostoUnitario",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> seleccioncolumnas2",
						"IngresosNetos select(mapColumn(",
						"          Cod_Producto,",
						"          {Ingresos Netos}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> seleccioncolumnas3",
						"seleccioncolumnas3 aggregate(groupBy(Cod_Producto),",
						"     Promedio = avg({Ingresos Netos}),",
						"          Suma = sum({Ingresos Netos})) ~> sumaypromedio",
						"NombreCategorias sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Cod_Categoria as string,",
						"          Nombre_Categoria as string",
						"     ),",
						"     partitionFileNames:['transformation1.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"TotalTotalOreMined sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transformation2.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"IngresosNetos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transformation8.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink8",
						"SeleccionMine sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transformation3.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3",
						"TotalByCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transformation4.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink4",
						"cantproductos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transformation5.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink5",
						"OrdenadoxCodProd sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transformation6.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink6",
						"CodCategoria3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transformation7.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink7",
						"sumaypromedio sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['transformation9.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink9"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/transformation3')]",
				"[concat(variables('factoryId'), '/datasets/transformation4')]",
				"[concat(variables('factoryId'), '/datasets/transformation5')]",
				"[concat(variables('factoryId'), '/datasets/transformation6')]",
				"[concat(variables('factoryId'), '/datasets/transformation7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL-pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"source4": {},
									"source5": {},
									"source6": {},
									"source7": {},
									"source8": {},
									"sink1": {},
									"sink2": {},
									"sink8": {},
									"sink3": {},
									"sink4": {},
									"sink5": {},
									"sink6": {},
									"sink7": {},
									"sink9": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-02T18:15:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		}
	]
}